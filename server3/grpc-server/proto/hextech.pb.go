// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.3
// source: hextech.proto

package hextech

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command     string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Region      string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	ProductName string `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"` // Puede ser vac√≠o
	Server      int32  `protobuf:"varint,5,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	mi := &file_hextech_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{0}
}

func (x *CommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CommandRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *CommandRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommandRequest) GetServer() int32 {
	if x != nil {
		return x.Server
	}
	return 0
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	mi := &file_hextech_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{1}
}

func (x *FileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type FileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	mi := &file_hextech_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{2}
}

func (x *FileResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomValue    int32   `protobuf:"varint,1,opt,name=randomValue,proto3" json:"randomValue,omitempty"` // Valor aleatorio entre 0 y 2
	Message        string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Value          string  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	RelojVectorial []int32 `protobuf:"varint,4,rep,packed,name=relojVectorial,proto3" json:"relojVectorial,omitempty"`
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	mi := &file_hextech_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{3}
}

func (x *CommandResponse) GetRandomValue() int32 {
	if x != nil {
		return x.RandomValue
	}
	return 0
}

func (x *CommandResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommandResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommandResponse) GetRelojVectorial() []int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

type ClockEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string  `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Clock  []int32 `protobuf:"varint,2,rep,packed,name=clock,proto3" json:"clock,omitempty"`
}

func (x *ClockEntry) Reset() {
	*x = ClockEntry{}
	mi := &file_hextech_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClockEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockEntry) ProtoMessage() {}

func (x *ClockEntry) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockEntry.ProtoReflect.Descriptor instead.
func (*ClockEntry) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{4}
}

func (x *ClockEntry) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClockEntry) GetClock() []int32 {
	if x != nil {
		return x.Clock
	}
	return nil
}

type ClocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clocks []*ClockEntry `protobuf:"bytes,1,rep,name=clocks,proto3" json:"clocks,omitempty"` // Lista de regiones con sus relojes
}

func (x *ClocksRequest) Reset() {
	*x = ClocksRequest{}
	mi := &file_hextech_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClocksRequest) ProtoMessage() {}

func (x *ClocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClocksRequest.ProtoReflect.Descriptor instead.
func (*ClocksRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{5}
}

func (x *ClocksRequest) GetClocks() []*ClockEntry {
	if x != nil {
		return x.Clocks
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	mi := &file_hextech_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{6}
}

type ClockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ClockRequest) Reset() {
	*x = ClockRequest{}
	mi := &file_hextech_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockRequest) ProtoMessage() {}

func (x *ClockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockRequest.ProtoReflect.Descriptor instead.
func (*ClockRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{7}
}

func (x *ClockRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ClockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clock    []int32 `protobuf:"varint,1,rep,packed,name=clock,proto3" json:"clock,omitempty"`
	Servidor int32   `protobuf:"varint,2,opt,name=servidor,proto3" json:"servidor,omitempty"`
}

func (x *ClockResponse) Reset() {
	*x = ClockResponse{}
	mi := &file_hextech_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockResponse) ProtoMessage() {}

func (x *ClockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockResponse.ProtoReflect.Descriptor instead.
func (*ClockResponse) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{8}
}

func (x *ClockResponse) GetClock() []int32 {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *ClockResponse) GetServidor() int32 {
	if x != nil {
		return x.Servidor
	}
	return 0
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogData string  `protobuf:"bytes,1,opt,name=logData,proto3" json:"logData,omitempty"`
	Clock   []int32 `protobuf:"varint,2,rep,packed,name=clock,proto3" json:"clock,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_hextech_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{9}
}

func (x *LogRequest) GetLogData() string {
	if x != nil {
		return x.LogData
	}
	return ""
}

func (x *LogRequest) GetClock() []int32 {
	if x != nil {
		return x.Clock
	}
	return nil
}

type MergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MergeResponse) Reset() {
	*x = MergeResponse{}
	mi := &file_hextech_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeResponse) ProtoMessage() {}

func (x *MergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeResponse.ProtoReflect.Descriptor instead.
func (*MergeResponse) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{10}
}

func (x *MergeResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *RegionRequest) Reset() {
	*x = RegionRequest{}
	mi := &file_hextech_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionRequest) ProtoMessage() {}

func (x *RegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionRequest.ProtoReflect.Descriptor instead.
func (*RegionRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{11}
}

func (x *RegionRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_hextech_proto protoreflect.FileDescriptor

var file_hextech_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x43, 0x0a,
	0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x28, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x6f, 0x6a, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x6f,
	0x6a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x3a, 0x0a, 0x0a, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3c, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63,
	0x68, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0d,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x64, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x64, 0x6f, 0x72, 0x22,
	0x3c, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x27, 0x0a,
	0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x27, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32,
	0xd1, 0x04, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x68,
	0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x4f, 0x62, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x6f, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65,
	0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x68, 0x65, 0x78, 0x74,
	0x65, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68,
	0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68, 0x65,
	0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65,
	0x63, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63,
	0x68, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x65, 0x78, 0x74,
	0x65, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x32, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68,
	0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hextech_proto_rawDescOnce sync.Once
	file_hextech_proto_rawDescData = file_hextech_proto_rawDesc
)

func file_hextech_proto_rawDescGZIP() []byte {
	file_hextech_proto_rawDescOnce.Do(func() {
		file_hextech_proto_rawDescData = protoimpl.X.CompressGZIP(file_hextech_proto_rawDescData)
	})
	return file_hextech_proto_rawDescData
}

var file_hextech_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_hextech_proto_goTypes = []any{
	(*CommandRequest)(nil),  // 0: hextech.CommandRequest
	(*FileRequest)(nil),     // 1: hextech.FileRequest
	(*FileResponse)(nil),    // 2: hextech.FileResponse
	(*CommandResponse)(nil), // 3: hextech.CommandResponse
	(*ClockEntry)(nil),      // 4: hextech.ClockEntry
	(*ClocksRequest)(nil),   // 5: hextech.ClocksRequest
	(*EmptyRequest)(nil),    // 6: hextech.EmptyRequest
	(*ClockRequest)(nil),    // 7: hextech.ClockRequest
	(*ClockResponse)(nil),   // 8: hextech.ClockResponse
	(*LogRequest)(nil),      // 9: hextech.LogRequest
	(*MergeResponse)(nil),   // 10: hextech.MergeResponse
	(*RegionRequest)(nil),   // 11: hextech.RegionRequest
}
var file_hextech_proto_depIdxs = []int32{
	4,  // 0: hextech.ClocksRequest.clocks:type_name -> hextech.ClockEntry
	0,  // 1: hextech.Broker.ProcessCommand:input_type -> hextech.CommandRequest
	0,  // 2: hextech.Broker.ObtenerProducto:input_type -> hextech.CommandRequest
	11, // 3: hextech.Broker.GetClockByRegion:input_type -> hextech.RegionRequest
	7,  // 4: hextech.Broker.GetClock:input_type -> hextech.ClockRequest
	9,  // 5: hextech.Broker.DistributeLogs:input_type -> hextech.LogRequest
	1,  // 6: hextech.Broker.DistributeRegions:input_type -> hextech.FileRequest
	1,  // 7: hextech.Broker.GetFile:input_type -> hextech.FileRequest
	1,  // 8: hextech.Broker.ReceiveMergedFile:input_type -> hextech.FileRequest
	1,  // 9: hextech.Broker.ReceiveMergedFile2:input_type -> hextech.FileRequest
	3,  // 10: hextech.Broker.ProcessCommand:output_type -> hextech.CommandResponse
	3,  // 11: hextech.Broker.ObtenerProducto:output_type -> hextech.CommandResponse
	8,  // 12: hextech.Broker.GetClockByRegion:output_type -> hextech.ClockResponse
	8,  // 13: hextech.Broker.GetClock:output_type -> hextech.ClockResponse
	10, // 14: hextech.Broker.DistributeLogs:output_type -> hextech.MergeResponse
	10, // 15: hextech.Broker.DistributeRegions:output_type -> hextech.MergeResponse
	2,  // 16: hextech.Broker.GetFile:output_type -> hextech.FileResponse
	2,  // 17: hextech.Broker.ReceiveMergedFile:output_type -> hextech.FileResponse
	2,  // 18: hextech.Broker.ReceiveMergedFile2:output_type -> hextech.FileResponse
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_hextech_proto_init() }
func file_hextech_proto_init() {
	if File_hextech_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hextech_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hextech_proto_goTypes,
		DependencyIndexes: file_hextech_proto_depIdxs,
		MessageInfos:      file_hextech_proto_msgTypes,
	}.Build()
	File_hextech_proto = out.File
	file_hextech_proto_rawDesc = nil
	file_hextech_proto_goTypes = nil
	file_hextech_proto_depIdxs = nil
}
