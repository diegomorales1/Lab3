// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: hextech.proto

package hextech

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command     string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Region      string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	ProductName string `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"` // Puede ser vac√≠o
	Server      int32  `protobuf:"varint,5,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	mi := &file_hextech_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{0}
}

func (x *CommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CommandRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *CommandRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommandRequest) GetServer() int32 {
	if x != nil {
		return x.Server
	}
	return 0
}

type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomValue    int32   `protobuf:"varint,1,opt,name=randomValue,proto3" json:"randomValue,omitempty"` // Valor aleatorio entre 0 y 2
	Message        string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Value          string  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"` // NUEVO CAMPO para devolver el valor del producto
	RelojVectorial []int32 `protobuf:"varint,4,rep,packed,name=relojVectorial,proto3" json:"relojVectorial,omitempty"`
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	mi := &file_hextech_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{1}
}

func (x *CommandResponse) GetRandomValue() int32 {
	if x != nil {
		return x.RandomValue
	}
	return 0
}

func (x *CommandResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommandResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommandResponse) GetRelojVectorial() []int32 {
	if x != nil {
		return x.RelojVectorial
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	mi := &file_hextech_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{2}
}

type ClockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ClockRequest) Reset() {
	*x = ClockRequest{}
	mi := &file_hextech_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockRequest) ProtoMessage() {}

func (x *ClockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockRequest.ProtoReflect.Descriptor instead.
func (*ClockRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{3}
}

func (x *ClockRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ClockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clock    []int32 `protobuf:"varint,1,rep,packed,name=clock,proto3" json:"clock,omitempty"`
	Servidor int32   `protobuf:"varint,2,opt,name=servidor,proto3" json:"servidor,omitempty"`
}

func (x *ClockResponse) Reset() {
	*x = ClockResponse{}
	mi := &file_hextech_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockResponse) ProtoMessage() {}

func (x *ClockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockResponse.ProtoReflect.Descriptor instead.
func (*ClockResponse) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{4}
}

func (x *ClockResponse) GetClock() []int32 {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *ClockResponse) GetServidor() int32 {
	if x != nil {
		return x.Servidor
	}
	return 0
}

type RandServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server int32 `protobuf:"varint,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *RandServerResponse) Reset() {
	*x = RandServerResponse{}
	mi := &file_hextech_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RandServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandServerResponse) ProtoMessage() {}

func (x *RandServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandServerResponse.ProtoReflect.Descriptor instead.
func (*RandServerResponse) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{5}
}

func (x *RandServerResponse) GetServer() int32 {
	if x != nil {
		return x.Server
	}
	return 0
}

type InconsistenciaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region  string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	Mensaje string `protobuf:"bytes,2,opt,name=mensaje,proto3" json:"mensaje,omitempty"` // Mensaje de la inconsistencia
}

func (x *InconsistenciaRequest) Reset() {
	*x = InconsistenciaRequest{}
	mi := &file_hextech_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InconsistenciaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InconsistenciaRequest) ProtoMessage() {}

func (x *InconsistenciaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InconsistenciaRequest.ProtoReflect.Descriptor instead.
func (*InconsistenciaRequest) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{6}
}

func (x *InconsistenciaRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *InconsistenciaRequest) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

type InconsistenciaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // Confirmaci√≥n de recepci√≥n
}

func (x *InconsistenciaResponse) Reset() {
	*x = InconsistenciaResponse{}
	mi := &file_hextech_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InconsistenciaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InconsistenciaResponse) ProtoMessage() {}

func (x *InconsistenciaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hextech_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InconsistenciaResponse.ProtoReflect.Descriptor instead.
func (*InconsistenciaResponse) Descriptor() ([]byte, []int) {
	return file_hextech_proto_rawDescGZIP(), []int{7}
}

func (x *InconsistenciaResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_hextech_proto protoreflect.FileDescriptor

var file_hextech_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x8b, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x6f, 0x6a, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6c,
	0x6f, 0x6a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x0e, 0x0a, 0x0c, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x0c, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x64, 0x6f, 0x72, 0x22, 0x2c, 0x0a, 0x12, 0x52, 0x61, 0x6e, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65, 0x22,
	0x30, 0x0a, 0x16, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x69,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0xae, 0x03, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x17,
	0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63,
	0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x4f, 0x62, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x6f, 0x12, 0x17, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x78,
	0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x4f, 0x62, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6c,
	0x6f, 0x6a, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x68, 0x65, 0x78, 0x74,
	0x65, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x15, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x68, 0x65, 0x78, 0x74,
	0x65, 0x63, 0x68, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x69,
	0x61, 0x12, 0x1e, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x68, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hextech_proto_rawDescOnce sync.Once
	file_hextech_proto_rawDescData = file_hextech_proto_rawDesc
)

func file_hextech_proto_rawDescGZIP() []byte {
	file_hextech_proto_rawDescOnce.Do(func() {
		file_hextech_proto_rawDescData = protoimpl.X.CompressGZIP(file_hextech_proto_rawDescData)
	})
	return file_hextech_proto_rawDescData
}

var file_hextech_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_hextech_proto_goTypes = []any{
	(*CommandRequest)(nil),         // 0: hextech.CommandRequest
	(*CommandResponse)(nil),        // 1: hextech.CommandResponse
	(*EmptyRequest)(nil),           // 2: hextech.EmptyRequest
	(*ClockRequest)(nil),           // 3: hextech.ClockRequest
	(*ClockResponse)(nil),          // 4: hextech.ClockResponse
	(*RandServerResponse)(nil),     // 5: hextech.RandServerResponse
	(*InconsistenciaRequest)(nil),  // 6: hextech.InconsistenciaRequest
	(*InconsistenciaResponse)(nil), // 7: hextech.InconsistenciaResponse
}
var file_hextech_proto_depIdxs = []int32{
	0, // 0: hextech.Broker.ProcessCommand:input_type -> hextech.CommandRequest
	0, // 1: hextech.Broker.ObtenerProducto:input_type -> hextech.CommandRequest
	3, // 2: hextech.Broker.GetClock:input_type -> hextech.ClockRequest
	3, // 3: hextech.Broker.ObtenerReloj:input_type -> hextech.ClockRequest
	2, // 4: hextech.Broker.GetRandServer:input_type -> hextech.EmptyRequest
	6, // 5: hextech.Broker.NotificarInconsistencia:input_type -> hextech.InconsistenciaRequest
	1, // 6: hextech.Broker.ProcessCommand:output_type -> hextech.CommandResponse
	1, // 7: hextech.Broker.ObtenerProducto:output_type -> hextech.CommandResponse
	4, // 8: hextech.Broker.GetClock:output_type -> hextech.ClockResponse
	4, // 9: hextech.Broker.ObtenerReloj:output_type -> hextech.ClockResponse
	5, // 10: hextech.Broker.GetRandServer:output_type -> hextech.RandServerResponse
	7, // 11: hextech.Broker.NotificarInconsistencia:output_type -> hextech.InconsistenciaResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_hextech_proto_init() }
func file_hextech_proto_init() {
	if File_hextech_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hextech_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hextech_proto_goTypes,
		DependencyIndexes: file_hextech_proto_depIdxs,
		MessageInfos:      file_hextech_proto_msgTypes,
	}.Build()
	File_hextech_proto = out.File
	file_hextech_proto_rawDesc = nil
	file_hextech_proto_goTypes = nil
	file_hextech_proto_depIdxs = nil
}
